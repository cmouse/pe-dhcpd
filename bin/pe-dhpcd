#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'pe-dhcpd'

## CONFIGURATION ##
# set to nil for guessing, otherwise specify
ip = nil
DNS_SERVERS = %w{ 195.10.132.196 195.10.132.203 }
NTP_SERVERS = %w{ 195.10.132.196 195.10.132.203 }
LEASE_TIME = 86400
REBIND_TIME = 37800
RENEWAL_TIME = 28800
## Set this to true if you want to select netmask
## based on the oddity of giaddr
##
## odd giaddr gives mask /30, even giaddr gives mask /31
YIADDR_POLICY_30_OR_31_MASK = false
## offset to apply to giaddr
YIADDR_POLICY = 1
## default subnet mask to use
SUBNET_MASK = '255.255.255.254'

# You can filter here any MAC masks you do not wish to serve
# Supports 00-00-00-00-00-00, 00:00:00:00:00:00, 0000.0000.0000
# and you can add /prefix to create a mask. Prefix can be from 0 to 48
# /48 is single address (default if omitted), and 0 is everything
#BLACKIST_MACS = %w{ b0:0b:00:00:00:00/24 test.addr.0000/40 }
BLACKLIST_MACS = []

# Define here one or more hooks to run at each stage
# Remember to require your hooks! Hook must be a 
# Class, Proc or a function 
#
# HOOK SIGNATURE
#   def process(msg)
#
# VALUES
#   msg = A PeDHCPd::BootPacket instance
#
# RETURN VALUES
#   false to drop packet
#   anything else, keep packet
#
# Make sure you know what you are doing if you modify it

HOOKS = {
 :discover => [],
 :offer => [],
 :request => [],
 :acknowledge => []
}

## END CONFIGURATION ##

# chkconfig for RedHat Linux...
#
# chkconfig: 345 99 00
# description: Controls the PE-DHCP daemon
# processname: pe-dhcpd

# chkconfig/insserv for SUSE Linux...
### BEGIN INIT INFO
# Provides: pe-dhcpd
# Required-Start: $all
# Should-Start:
# X-UnitedLinux-Should-Start:
# Required-Stop:
# Default-Start: 3 5
# Default-Stop:
# Short-Description: pe-dhcpd
# Description: Controls the PE-DHCP daemon
### END INIT INFO

Daemons.run_proc('pe-dhcpd', { :dir_mode => :system }) do
  log = Log4r::Logger.new 'dhcpd'

  begin
    log.outputters = Log4r::SyslogOutputter.new('dhcpd', :logopt => 0x1, :facility => 'LOG_DAEMON')
    log.outputters[0].formatter = Log4r::PatternFormatter.new(:pattern => "%M")
    log.level = Log4r::INFO

    if Daemons.controller.options[:ontop]
      log.outputters[1] = Log4r::Outputter.stderr
      log.outputters[1].formatter = Log4r::PatternFormatter.new(:pattern => "%d [%l]: %m")
    end

    app = PeDHCPd::DhcpServer.new(ip)
    app.log = log
    app.run
  rescue Interrupt, SystemExit => e
    log.warn "Shutdown complete"
    # do nothing
  end
end
